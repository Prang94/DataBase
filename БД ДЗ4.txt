CREATE TABLE Stuff ( --берем таблицу из прошлого дз

ID int IDENTITY (1,1) NOT NULL PRIMARY KEY,
First_Name nvarchar(50) NOT NULL CHECK (First_Name != ' '),
Last_Name nvarchar(50) NOT NULL CHECK (Last_Name != ' '),
Position nvarchar(50) NOT NULL CHECK (Position != ' '),
Date_Apply date NOT NULL CHECK (Date_Apply > '2000-12-31')

)


INSERT INTO Stuff (First_Name, Last_Name, Position, Date_Apply)

VALUES

('Egor', 'Titov', 'footballer', '2004-12-20'),
('Alexandr', 'Medvedev', 'president', '2017-11-30'),
('Sergey', 'Semak', 'manager', '2017-10-20'),
('Elena', 'Iluhina', 'director', '2018-01-15'),
('Sebastien', 'Driussi', 'footballer', '2018-09-12'),
('Mariya', 'Burova', 'fizioterapevt', '2018-10-25')

CREATE TABLE Stuff_arch ( --создаем таблицу для архивных записей

ID int IDENTITY(1,1) PRIMARY KEY,
First_Name nvarchar(50),
Last_Name nvarchar(50),
Position nvarchar(50), 
Date_Apply date

)

1)


CREATE TRIGGER tr_1 ON Stuff

AFTER DELETE

AS

DECLARE @First_Name NVARCHAR(50)
DECLARE @Last_Name NVARCHAR(50)
DECLARE @Position NVARCHAR(50)
DECLARE @Date_Apply DATE

SELECT @First_Name = (SELECT First_Name FROM deleted)
SELECT @Last_Name = (SELECT Last_Name FROM deleted)
SELECT @Position = (SELECT Position FROM deleted)
SELECT @Date_Apply = (SELECT Date_Apply FROM deleted)

INSERT INTO Stuff_arch

VALUES (@First_Name, @Last_Name, @Position, @Date_Apply)


2)

CREATE TRIGGER IsDel_true ON Stuff

INSTEAD OF DELETE

AS

ALTER TABLE Stuff ADD IsDeleted bit NOT NULL DEFAULT 1

3) 

ALTER TABLE Stuff ADD Date_Last_Change datetime NOT NULL DEFAULT GetDate() -- добавляем в таблицу столбец, отвечающий за информацию о последнем изменении

CREATE TRIGGER Renew ON Stuff

AFTER UPDATE

AS

UPDATE Stuff SET Date_Last_Change = GetDate()